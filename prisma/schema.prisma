// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator markdown {
  provider = "prisma-markdown"
  output   = "./ERD.md"
  title    = "Resupath"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// 한 브라우저에서 입장하여 브라우저를 종료하기 전, 즉 세션을 유저라고 한다.
/// 이 유저가 언제 접속해서 언제 퇴장했는지를 파악하기 위해 유저마다 생성 시간과 이탈 시간을 둔다.
/// @namespace Actor
/// @namespace Character
model User {
  id         String    @id @db.Uuid /// PK
  created_at DateTime /// 유저가 입장한 시간
  deleted_at DateTime? /// 유저가 이탈한 시간
  member_id  String?   @db.Uuid /// 유저가 누군지 식별 가능한 시점에 member_id를 기입한다.

  member Member? @relation(fields: [member_id], references: [id], onDelete: Cascade)
  Room   Room[]
}

/// 회원가입하여 동일한 유저임을 알 수 있는 경우를 `Member`
/// @namespace Actor
model Member {
  id         String    @id @db.Uuid /// PK
  name       String /// 사용자 이름으로, 면접 서비스기 때문에 실명을 사용한다. 단, 강제성은 없다.
  created_at DateTime /// 유저가 가입한 시간으로, 이 시간을 멤버가 된 시간으로 인식한다.
  deleted_at DateTime? /// 회원탈퇴한 경우

  users     User[] /// 비회원 중 해당 Member와 동일인물임이 확정된 유저
  providers Provider[] /// 회원에 연결한 OAuth App들을 의미한다.
  Character Character[]
}

/// OAuth 연동 정보를 저장한다.
/// @namespace Actor
model Provider {
  id         String   @id @db.Uuid /// PK
  member_id  String   @db.Uuid /// OAuth로 가입한 유저
  type       String /// google, kakao와 같은 서비스 명칭
  uid        String /// OAuth 내에서 해당 유저를 가리키는 아이디로, 외부 유저 Unique ID
  password   String /// OAuth 상에서 해당 유저를 식별 가능한 Refresh Token
  created_at DateTime /// OAuth가 연동된 시간으로, 삭제는 불가능하다. 회원 탈퇴 시간은 Member를 확인할 것.

  member Member @relation(fields: [member_id], references: [id]) /// 해당 계정 정보가 가리키는 멤버 정보
}

/// 멤버가 생성한 캐릭터.
/// 멤버는 면접 대상자를 등록하여 면접을 예행연습할 수 있다.
/// @namespace Character
model Character {
  id         String    @id @db.Uuid /// PK
  member_id  String    @db.Uuid /// 캐릭터 생성자 아이디
  nickname   String /// 사용자는 이름을 숨기고 싶을 수 있기 때문에 닉네임이라고 둔다. 단, 강제성은 없다.
  is_public  Boolean /// 캐릭터 활성화 여부로 true인 경우에는 'public', 그렇지 않은 경우는 'private'.
  created_at DateTime /// 캐릭터가 생성된 시점
  deleted_at DateTime? /// 캐릭터가 삭제된 시점

  creator Member @relation(fields: [member_id], references: [id]) // 캐릭터 생성자
  rooms   Room[]
}

/// 채팅방.
/// 하나의 캐릭터에 여러개의 유저가 채팅방을 생성할 수 있고, 유저는 여러개의 캐릭터에 대해 채팅방을 생성할 수 있다.
/// @namespace Character
model Room {
  id           String    @id @db.Uuid /// PK, 유저는 한 캐릭터에 대해서 여러 개의 방을 생성할 수 있기 때문에 별도의 ID를 둔다.
  user_id      String    @db.Uuid /// 채팅에 참여한 유저의 아이디
  character_id String    @db.Uuid /// 채팅에 참여한 캐릭터의 아이디
  created_at   DateTime /// 채팅방이 생성된 시점
  deleted_at   DateTime? /// 채팅방이 삭제된 시점

  user      User      @relation(fields: [user_id], references: [id])
  character Character @relation(fields: [character_id], references: [id])
}
