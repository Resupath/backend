// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator markdown {
  provider = "prisma-markdown"
  output   = "./ERD.md"
  title    = "Resupath"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// 한 브라우저에서 입장하여 브라우저를 종료하기 전, 즉 세션을 유저라고 한다.
/// 이 유저가 언제 접속해서 언제 퇴장했는지를 파악하기 위해 유저마다 생성 시간과 이탈 시간을 둔다.
/// @namespace Actor
/// @namespace Character
model User {
  id         String    @id @db.Uuid /// PK
  created_at DateTime  @db.Timestamptz /// 유저가 입장한 시간
  deleted_at DateTime? @db.Timestamptz /// 유저가 이탈한 시간
  member_id  String?   @db.Uuid /// 유저가 누군지 식별 가능한 시점에 member_id를 기입한다.

  member Member? @relation(fields: [member_id], references: [id], onDelete: Cascade)
  rooms  Room[]
  chats  Chat[]
}

/// 회원가입하여 동일한 유저임을 알 수 있는 경우를 `Member`
/// @namespace Actor
model Member {
  id         String    @id @db.Uuid /// PK
  name       String /// 사용자 이름으로, 면접 서비스기 때문에 실명을 사용한다. 단, 강제성은 없다.
  created_at DateTime  @db.Timestamptz /// 유저가 가입한 시간으로, 이 시간을 멤버가 된 시간으로 인식한다.
  deleted_at DateTime? @db.Timestamptz /// 회원탈퇴한 경우

  users       User[] /// 비회원 중 해당 Member와 동일인물임이 확정된 유저
  providers   Provider[] /// 회원에 연결한 OAuth App들을 의미한다.
  characters  Character[] /// 회원이 생성한 캐릭터들.
  experiences Experience[] /// 회원과 연결된 경력 데이터를 의미한다.
}

/// `Member`의 경력사항을 나타낸다.
/// @namespace Character
model Experience {
  id           String    @id @db.Uuid /// PK
  member_id    String    @db.Uuid /// 가입된 사용자가 경력을 입력할 수 있다.
  company_name String
  position     String /// 직군을 입력한다. 
  start_date   String /// 근무 시작 날짜. 월까지 입력한다.
  end_date     String? /// 근무 종료 날짜. 월까지 입력하며, 현재 재직 중일 경우 null이다.
  description  String? /// 경력에 대한 설명. 업문 내용 등 사용자가 입력하고 싶은 것들을 적으며, 비워둘 수 있다.
  sequence     Int /// 경력의 순서를 저장하는 필드이다. 유저에게 보여줄때 순서를 보장하기 위해 사용한다.
  created_at   DateTime  @db.Timestamptz /// 경력을 최초 입력후 저장한 시간.
  deleted_at   DateTime? @db.Timestamptz /// 경력을 삭제한 경우.

  memer                          Member                          @relation(fields: [member_id], references: [id])
  character_snapshot_experiences Character_Snapshot_Experience[]
}

/// 캐릭터의 학습에 사용된 경력 사항들을 저장한다. 캐릭터 스냅샷과 다대다 관계를 가진다.
/// @namespace Character
model Character_Snapshot_Experience {
  character_snapshot_id String    @db.Uuid /// Character_Snapshot FK
  experience_id         String    @db.Uuid /// Experience FK
  created_at            DateTime  @default(now()) @db.Timestamptz /// 관계 생성 시간
  deleted_at            DateTime? @db.Timestamptz /// 관계 삭제 시간

  character_snapshot Character_Snapshot @relation(fields: [character_snapshot_id], references: [id])
  experience         Experience         @relation(fields: [experience_id], references: [id])

  @@unique([character_snapshot_id, experience_id]) /// Character와 Experience의 조합이 유일해야 함
}

/// OAuth 연동 정보를 저장한다.
/// @namespace Actor
model Provider {
  id         String   @id @db.Uuid /// PK
  member_id  String   @db.Uuid /// OAuth로 가입한 유저
  type       String /// google, kakao와 같은 서비스 명칭
  uid        String /// OAuth 내에서 해당 유저를 가리키는 아이디로, 외부 유저 Unique ID
  password   String /// OAuth 상에서 해당 유저를 식별 가능한 Refresh Token
  created_at DateTime @db.Timestamptz /// OAuth가 연동된 시간으로, 삭제는 불가능하다. 회원 탈퇴 시간은 Member를 확인할 것.

  member Member @relation(fields: [member_id], references: [id]) /// 해당 계정 정보가 가리키는 멤버 정보
}

/// 캐릭터 학습에 필요한 자료들
/// 자기소개서, 포트폴리오, 이력서와 같은 파일
/// 유저가 캐릭터와 채팅을 시작할 때 이 소스들로부터 캐릭터가 학습 후 면접이 시작된다.
/// 따라서 타입이 'link'인 것은 링크의 컨텐츠가 수정될 때마다 캐릭터가 동기화되는 것과 같다.
/// @namespace Character
model Source {
  id           String    @id @db.Uuid /// PK
  character_id String    @db.Uuid /// 캐릭터의 아이디
  type         String /// Source의 대분류로, 'file' | 'link' 둘 중 하나를 가진다.
  /// 파일이나 링크의 소분류.
  /// 파일인 경우에는 'cover_letter' | 'portfolio' | 'resume'이 존재할 수 있다.
  /// 링크인 경우에는 'github' | 'notion' 이 있다.
  subtype      String
  url          String /// 링크의 주소나 파일의 주소, file인 경우에도 S3에 업로드 되므로 분류와 관계 없이 url  형태가 된다.
  created_at   DateTime  @db.Timestamptz /// 소스가 등록된 시간
  deleted_at   DateTime? @db.Timestamptz /// 소스가 삭제된 시간

  character Character @relation(fields: [character_id], references: [id])
}

/// 멤버가 생성한 캐릭터.
/// 멤버는 면접 대상자를 등록하여 면접을 예행연습할 수 있다.
/// @namespace Character
model Character {
  id         String    @id @db.Uuid /// PK
  member_id  String    @db.Uuid /// 캐릭터 생성자 아이디
  is_public  Boolean /// 캐릭터 활성화 여부. true인 경우에는 'public', 그렇지 않은 경우는 'private'이다.
  created_at DateTime  @db.Timestamptz /// 캐릭터가 생성된 시점
  deleted_at DateTime? @db.Timestamptz /// 캐릭터가 삭제된 시점

  creator                Member                  @relation(fields: [member_id], references: [id]) // 캐릭터 생성자
  rooms                  Room[] /// 캐릭터를 기준으로 생성된 채팅방
  chats                  Chat[] /// 캐릭터와 대화한 기록
  sources                Source[] /// 캐릭터 생성에 사용된 소스
  character_personalites Character_Personality[] /// 캐릭터 생성에 사용된 성격

  /// 스냅샷들
  snapshots     Character_Snapshot[]
  last_snapshot Character_Last_Snapshot?
}

/// 캐릭터 스냅샷
/// @namespace Character
model Character_Snapshot {
  id           String   @id @db.Uuid /// PK
  character_id String   @db.Uuid /// 스냅샷이 참조하는 캐릭터 ID
  nickname     String /// 캐릭터의 이름, 사용자 본명을 사용하는 것이 권장되나 강제성은 없다.
  image        String? /// 캐릭터 프로필 이미지. s3 url을 저장한다.
  created_at   DateTime @db.Timestamptz /// 스냅샷 생성 시점

  character                      Character                       @relation(fields: [character_id], references: [id])
  last_snapshot                  Character_Last_Snapshot?
  character_snapshot_experiences Character_Snapshot_Experience[]
  character_snapshot_positions   Character_Snapshot_Position[]
  character_snapshot_skills      Character_Snapshot_Skill[]
}

/// 캐릭터의 마지막 스냅샷
/// @namespace Character
model Character_Last_Snapshot {
  character_id          String @id @db.Uuid /// Character FK
  character_snapshot_id String @db.Uuid /// Character_Snapshot FK

  character Character          @relation(fields: [character_id], references: [id])
  snapshot  Character_Snapshot @relation(fields: [character_snapshot_id], references: [id])

  @@unique([character_snapshot_id])
}

/// 캐릭터의 성격 유형
/// 하나의 캐릭터는 여러개의 성격으로 지정될 수 있으며, 하나의 성격은 여러개의 캐릭터가 가지고 있을수 있다.
/// @namespace Character
model Character_Personality {
  character_id   String    @db.Uuid /// Character FK
  personality_id String    @db.Uuid /// Personality FK
  created_at     DateTime  @db.Timestamptz /// 캐릭터와 성격이 관계 생성 시점
  deleted_at     DateTime? @db.Timestamptz /// 캐릭터와 성격의 관계가 해제된 시점

  personality Personality @relation(fields: [personality_id], references: [id])
  character   Character   @relation(fields: [character_id], references: [id])

  @@unique([character_id, personality_id])
}

/// 성격 유형.
/// 소스와 함께 학습에 사용된다. 캐릭터의 말투와 성격을 결정한다. 
/// @namespace Character
model Personality {
  id         String    @id @db.Uuid /// PK
  keyword    String /// 성격에 대해 설명하는 단어나 문장. '용감한', '호기심이 많은' 같은 성격과 관련된 키워드이다.
  created_at DateTime  @db.Timestamptz /// 성격이 생성된 시점
  deleted_at DateTime? @db.Timestamptz /// 성격이 삭제된 시점

  character_personalites Character_Personality[]
}

/// 캐릭터의 직군 정보
/// 사용자는 캐릭터 생성시 직군에 관한 정보를 입력할 수 있다.
/// @namespace Character
model Character_Snapshot_Position {
  character_snapshot_id String @db.Uuid ///  Character_Snapshot FK
  position_id           String @db.Uuid /// Postion FK

  character_snapshot Character_Snapshot @relation(fields: [character_snapshot_id], references: [id])
  postion            Position           @relation(fields: [position_id], references: [id])

  @@unique([character_snapshot_id, position_id])
}

/// 직군.
/// 프론트, 백엔드 같은 직군의 정보를 저장한다.
/// @namespace Character
model Position {
  id         String    @id @db.Uuid /// PK
  keyword    String /// 직군을 표현하는 단어를 뜻한다.
  created_at DateTime  @db.Timestamptz /// 직군이 등록된 시점
  deleted_at DateTime? @db.Timestamptz /// 직군이 삭제된 시점

  character_snapshot_positions Character_Snapshot_Position[]
}

/// 캐릭터의 기술 스택 정보
/// 사용자는 캐릭터 생성시 기술 스택(스킬)에 관한 정보를 입력할 수 있다.
/// @namespace Character
model Character_Snapshot_Skill {
  character_snapshot_id String @db.Uuid ///  Character_Snapshot FK
  skill_id              String @db.Uuid /// Skill FK

  character_snapshot Character_Snapshot @relation(fields: [character_snapshot_id], references: [id])
  skill              Skill              @relation(fields: [skill_id], references: [id])

  @@unique([character_snapshot_id, skill_id])
}

/// 기술 스택
/// React, NestJS 기술 스택(스킬)의 정보를 저장한다.
/// @namespace Character
model Skill {
  id         String    @id @db.Uuid /// PK
  keyword    String /// 스킬의 이름
  created_at DateTime  @db.Timestamptz /// 스킬이 등록된 시점
  deleted_at DateTime? @db.Timestamptz /// 스킬이 삭제된 시점

  character_snapshot_skills Character_Snapshot_Skill[]
}

/// 채팅방.
/// 하나의 캐릭터에 여러개의 유저가 채팅방을 생성할 수 있고, 유저는 여러개의 캐릭터에 대해 채팅방을 생성할 수 있다.
/// @namespace Character
model Room {
  id           String    @id @db.Uuid /// PK, 유저는 한 캐릭터에 대해서 여러 개의 방을 생성할 수 있기 때문에 별도의 ID를 둔다.
  user_id      String    @db.Uuid /// 채팅에 참여한 유저의 아이디
  character_id String    @db.Uuid /// 채팅에 참여한 캐릭터의 아이디
  created_at   DateTime  @db.Timestamptz /// 채팅방이 생성된 시점
  deleted_at   DateTime? @db.Timestamptz /// 채팅방이 삭제된 시점

  user      User      @relation(fields: [user_id], references: [id])
  character Character @relation(fields: [character_id], references: [id])
  Chat      Chat[]
}

/// 채팅 내용.
/// 유저 또는 캐릭터가 말하는 것이기 때문에, 둘 중 하나는 반드시 NOT NULL 이다. 
/// @namespace Character
model Chat {
  id           String    @id @db.Uuid /// PK
  room_id      String    @db.Uuid /// Room FK
  user_id      String?   @db.Uuid /// 유저가 보낸 채팅인 경우 유저 아이디를 저장한다.
  character_id String?   @db.Uuid /// 캐릭터가 보낸 채팅인 경우 캐릭터의 아이디를 저장한다.
  message      String /// 채팅 메시지
  created_at   DateTime  @db.Timestamptz /// 채팅을 보낸 시간
  deleted_at   DateTime? @db.Timestamptz /// 채팅을 지우는 기능은 기획 상 존재하지 않지만, 확장을 고려해 만들어둔다.

  room      Room       @relation(fields: [room_id], references: [id])
  user      User?      @relation(fields: [user_id], references: [id])
  character Character? @relation(fields: [character_id], references: [id])
}
